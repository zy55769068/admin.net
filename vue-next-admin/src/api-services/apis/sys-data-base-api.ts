/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/Admin.NET/'>https://gitee.com/zuohuaijun/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultListDbColumnInfoOutput } from '../models';
import { AdminResultListDbTableInfo } from '../models';
import { CreateEntityInput } from '../models';
import { DbColumnInfoInput } from '../models';
import { DbColumnInfoOutput } from '../models';
import { DbTableInfoInput } from '../models';
import { DeleteTableInput } from '../models';
import { EditColumnInput } from '../models';
import { EditTableInput } from '../models';
/**
 * SysDataBaseApi - axios parameter creator
 * @export
 */
export const SysDataBaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加列
         * @param {DbColumnInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnAddPost: async (body?: DbColumnInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/column/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除列
         * @param {DbColumnInfoOutput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnDeletePost: async (body?: DbColumnInfoOutput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/column/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑列
         * @param {EditColumnInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        columnEditPost: async (body?: EditColumnInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/column/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取表字段
         * @param {string} [tableName] 表名
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataBaseColumnInfoListGet: async (tableName?: string, configId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dataBase/columnInfoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (tableName !== undefined) {
                localVarQueryParameter['tableName'] = tableName;
            }

            if (configId !== undefined) {
                localVarQueryParameter['configId'] = configId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取表信息
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataBaseTableInfoListGet: async (configId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dataBase/tableInfoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (configId !== undefined) {
                localVarQueryParameter['configId'] = configId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增表
         * @param {DbTableInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableAddPost: async (body?: DbTableInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/table/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建实体
         * @param {CreateEntityInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableCreateEntityPost: async (body?: CreateEntityInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/table/createEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除表
         * @param {DeleteTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableDeletePost: async (body?: DeleteTableInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/table/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑表
         * @param {EditTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableEditPost: async (body?: EditTableInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/table/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysDataBaseApi - functional programming interface
 * @export
 */
export const SysDataBaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加列
         * @param {DbColumnInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnAddPost(body?: DbColumnInfoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).columnAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除列
         * @param {DbColumnInfoOutput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnDeletePost(body?: DbColumnInfoOutput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).columnDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑列
         * @param {EditColumnInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnEditPost(body?: EditColumnInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).columnEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取表字段
         * @param {string} [tableName] 表名
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataBaseColumnInfoListGet(tableName?: string, configId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListDbColumnInfoOutput>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).dataBaseColumnInfoListGet(tableName, configId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取表信息
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataBaseTableInfoListGet(configId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListDbTableInfo>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).dataBaseTableInfoListGet(configId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新增表
         * @param {DbTableInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableAddPost(body?: DbTableInfoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).tableAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建实体
         * @param {CreateEntityInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableCreateEntityPost(body?: CreateEntityInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).tableCreateEntityPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除表
         * @param {DeleteTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableDeletePost(body?: DeleteTableInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).tableDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑表
         * @param {EditTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableEditPost(body?: EditTableInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysDataBaseApiAxiosParamCreator(configuration).tableEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysDataBaseApi - factory interface
 * @export
 */
export const SysDataBaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加列
         * @param {DbColumnInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnAddPost(body?: DbColumnInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).columnAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除列
         * @param {DbColumnInfoOutput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnDeletePost(body?: DbColumnInfoOutput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).columnDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑列
         * @param {EditColumnInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async columnEditPost(body?: EditColumnInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).columnEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取表字段
         * @param {string} [tableName] 表名
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataBaseColumnInfoListGet(tableName?: string, configId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDbColumnInfoOutput>> {
            return SysDataBaseApiFp(configuration).dataBaseColumnInfoListGet(tableName, configId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取表信息
         * @param {string} [configId] ConfigId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataBaseTableInfoListGet(configId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListDbTableInfo>> {
            return SysDataBaseApiFp(configuration).dataBaseTableInfoListGet(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增表
         * @param {DbTableInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableAddPost(body?: DbTableInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).tableAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建实体
         * @param {CreateEntityInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableCreateEntityPost(body?: CreateEntityInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).tableCreateEntityPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除表
         * @param {DeleteTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableDeletePost(body?: DeleteTableInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).tableDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑表
         * @param {EditTableInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableEditPost(body?: EditTableInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysDataBaseApiFp(configuration).tableEditPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysDataBaseApi - object-oriented interface
 * @export
 * @class SysDataBaseApi
 * @extends {BaseAPI}
 */
export class SysDataBaseApi extends BaseAPI {
    /**
     * 
     * @summary 添加列
     * @param {DbColumnInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async columnAddPost(body?: DbColumnInfoInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).columnAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除列
     * @param {DbColumnInfoOutput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async columnDeletePost(body?: DbColumnInfoOutput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).columnDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑列
     * @param {EditColumnInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async columnEditPost(body?: EditColumnInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).columnEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取表字段
     * @param {string} [tableName] 表名
     * @param {string} [configId] ConfigId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async dataBaseColumnInfoListGet(tableName?: string, configId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListDbColumnInfoOutput>> {
        return SysDataBaseApiFp(this.configuration).dataBaseColumnInfoListGet(tableName, configId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取表信息
     * @param {string} [configId] ConfigId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async dataBaseTableInfoListGet(configId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListDbTableInfo>> {
        return SysDataBaseApiFp(this.configuration).dataBaseTableInfoListGet(configId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 新增表
     * @param {DbTableInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async tableAddPost(body?: DbTableInfoInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).tableAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 创建实体
     * @param {CreateEntityInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async tableCreateEntityPost(body?: CreateEntityInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).tableCreateEntityPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除表
     * @param {DeleteTableInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async tableDeletePost(body?: DeleteTableInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).tableDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 编辑表
     * @param {EditTableInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDataBaseApi
     */
    public async tableEditPost(body?: EditTableInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysDataBaseApiFp(this.configuration).tableEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
